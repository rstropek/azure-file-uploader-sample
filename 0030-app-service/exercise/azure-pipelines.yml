name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  testWebAppName: 'web-test-pev2gfaroj3es'
  prodWebAppName: 'web-pev2gfaroj3es'

trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: '👷‍♂️🧪📦 Build, test, and publish web app'
    jobs:
      - job: 'Build'
        displayName: '👷‍♂️🧪📦 Build, test, and publish web app'
        variables:
          buildConfiguration: 'Release'
        steps:
          - script: dotnet build --configuration $(buildConfiguration)
            displayName: '👷‍♂️ Build ASP.NET app'

          - script: dotnet tool install --global dotnet-reportgenerator-globaltool
            displayName: '🧪 Install ReportGenerator tool'  
          - script: |
              dotnet test --no-restore --configuration $(buildConfiguration) --collect "XPlat Code Coverage"
            displayName: '🧪 Test ASP.NET app'
          - script: reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
            displayName: '🧪 Create code coverage report'
          - task: PublishCodeCoverageResults@1  
            displayName: '🧪 Publish code coverage'
            inputs:  
              codeCoverageTool: Cobertura  
              summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'

          - script: dotnet publish --no-restore --no-build --configuration $(buildConfiguration) --output $(Build.SourcesDirectory)/out
            workingDirectory: HelloAspNet
            displayName: '📦 Publish app'
          - task: ArchiveFiles@2
            displayName: '📦 Create ZIP archive for app'
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/out
              includeRootFolder: false
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          - task: PublishPipelineArtifact@1
            displayName: '📢 Publish web app'
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              artifactName: WebApp

  - stage: Test
    displayName: '🧪 Deploy app to test environment after manual validation'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    dependsOn: Build
    jobs:
      - job: DeployToTest
        displayName: '🚚🧪 Deploy app to test environment after manual validation'
        variables:
          webAppName: $(testWebAppName)
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: WebApp
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure'
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/$(Build.BuildId).zip'

  - stage: Production
    displayName: '⚡ Deploy app to production environment after manual validation'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    dependsOn: Test
    jobs:
      - job: ProdValidation
        displayName: '⏰ Wait for manual validation'
        pool: server
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440
            inputs:
              notifyUsers: |
                 rainer@software-architects.at
              instructions: 'Please validate the build configuration and resume'
      - job: DeployToProd
        displayName: '🚚⚡ Deploy app to production environment after manual validation'
        dependsOn: ProdValidation
        variables:
          webAppName: $(prodWebAppName)
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: WebApp
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure'
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/$(Build.BuildId).zip'
